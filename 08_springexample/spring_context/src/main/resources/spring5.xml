<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="customerService" class="com.liu.spring.aop.simple.service.CustomerService">
        <property name="name" value="YiiBaii Mook Kim" />
        <property name="url" value="http://www.yiibai.com" />
    </bean>

    <bean id="hijackBeforeMethodBean" class="com.liu.spring.aop.simple.advice.HijackBeforeMethod" />
    <!--所有方法执行之前通知-->
    <!--<bean id="customerServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
        <!--&lt;!&ndash;目标bean&ndash;&gt;-->
        <!--<property name="target" ref="customerService" />-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>hijackBeforeMethodBean</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->


    <bean id="hijackAfterMethodBean" class="com.liu.spring.aop.simple.advice.HijackAfterMethod" />
    <!--所有方法执行之后通知-->
    <!--<bean id="customerServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->

        <!--<property name="target" ref="customerService" />-->

        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>hijackAfterMethodBean</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="hijackThrowExceptionBean" class="com.liu.spring.aop.simple.advice.HijackThrowException" />
    <!--所有异常之后通知-->
    <!--<bean id="customerServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->

        <!--<property name="target" ref="customerService" />-->

        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>hijackThrowExceptionBean</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="hijackAroundMethodBean" class="com.liu.spring.aop.simple.advice.HijackAroundMethod" />
    <!--环绕通知-->
    <!--<bean id="customerServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->

        <!--<property name="target" ref="customerService" />-->

        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>hijackAroundMethodBean</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="customerServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
        <!--<property name="target" ref="customerService" />-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>customerAdvisor</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="customerYiibaicut" class="org.springframework.aop.support.NameMatchMethodPointcut">
        <property name="mappedName" value="printName" />
    </bean>

    <bean id="customerAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <property name="pointcut" ref="customerYiibaicut" />
        <property name="advice" ref="hijackAroundMethodBean" />
    </bean>
<!--Spring有两个自动代理创建者来自动创建代理bean,只需要创建一个的 BeanNameAutoProxyCreator-->
    <!--<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">-->
        <!--<property name="beanNames">-->
            <!--<list>-->
                <!--<value>*Service</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>customerAdvisor</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />







</beans>